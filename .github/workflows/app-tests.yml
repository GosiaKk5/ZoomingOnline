name: Web App Tests

# Trigger the workflow on:
on:
  push:
    branches: [ main ]           # Every push to main branch
  pull_request:                  # Every pull request
  schedule:
    - cron: '0 0 * * 1'         # Weekly on Monday at 00:00 UTC

# Security: Limit permissions to read-only
permissions:
  contents: read

jobs:
  browser-tests:
    name: Browser Tests
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Get the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'
          cache-dependency-path: 'app/package-lock.json'

      # Step 3: Install project dependencies
      - name: Install Node.js dependencies
        working-directory: ./app
        run: npm ci

      # Step 4: Cache Playwright browsers to speed up CI
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      # Step 5: Install Playwright browser binaries
      - name: Install Playwright browsers
        working-directory: ./app
        run: npx playwright install chromium

      # Step 6: Build the application for production-like testing
      - name: Build application
        working-directory: ./app
        run: npm run build

      # Step 7: Start the preview server in background with proper logging
      - name: Start preview server
        working-directory: ./app
        run: |
          echo "Starting preview server..."
          npm run preview -- --port 4173 --strictPort --host &
          SERVER_PID=$!
          echo "Preview server started with PID: $SERVER_PID"
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
      
      # Step 8: Wait for server to be ready and test static files
      - name: Wait for server and verify static files
        working-directory: ./app
        run: |
          echo "Waiting for server to be ready..."
          npx wait-on http://localhost:4173/ --timeout 30000 --interval 1000
          
          echo "Testing server response..."
          curl -f http://localhost:4173/ || exit 1
          
          echo "Testing static zarr data availability..."
          curl -f http://localhost:4173/downloads/example.zarr/.zarray || {
            echo "ERROR: Zarr data not accessible"
            ls -la static/downloads/example.zarr/
            exit 1
          }
          
          echo "Server is ready and serving static files correctly"

      # Step 9: Run the actual browser tests with increased timeouts
      - name: Run browser tests with local data
        working-directory: ./app
        run: |
          echo "Starting browser tests..."
          echo "Environment variables:"
          echo "  USE_LOCAL_DATA=$USE_LOCAL_DATA"
          echo "  CI=$CI"
          echo "Available processes:"
          ps aux | grep -E "(vite|playwright|node)" | head -10
          echo "Port 4173 status:"
          lsof -i :4173 || echo "No process found on port 4173"
          echo "Running tests..."
          USE_LOCAL_DATA=true npx playwright test --reporter=line --timeout=120000
        env:
          USE_LOCAL_DATA: true

      # Step 10: Upload test artifacts (reports, screenshots) if tests fail
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if tests fail
        with:
          name: playwright-report
          path: |
            app/playwright-report/
            app/*.png
          retention-days: 30

      # Step 11: Cleanup - stop the preview server
      - name: Stop preview server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            echo "Stopping preview server with PID: $SERVER_PID"
            kill $SERVER_PID || echo "Server already stopped"
          fi
